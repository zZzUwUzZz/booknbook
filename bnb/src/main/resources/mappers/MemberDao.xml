<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.cjcs.bnb.dao.MemberDao">

<!-- 킹효진 -->

<!-- 판매자 아이디 불러오기 -->
   <select id="getMemberInfo" resultType="com.cjcs.bnb.dto.MemberDto">
   SELECT M.*, S.s_storename, S.s_storedesc, S.s_crn, S.s_deliveryfee, S.s_latefee, SF.sf_sysname
FROM M
LEFT JOIN S ON M.m_id = S.s_id
LEFT JOIN SF ON S.s_id = SF.sf_s_id
WHERE M.m_id = #{s_id}
    </select>

<!--이재락-->


    <!--회원가입정보 DB에 넣기-->
    <insert id="joinMember" parameterType="MemberDto">
        INSERT INTO M
        VALUES(#{m_id}, #{m_pw}, #{m_addr}, #{m_phone}, #{m_email}, DEFAULT)
    </insert>
    
  <insert id="joinSeller" parameterType="MemberDto">
        INSERT INTO S(s_id, s_storename, s_crn )
        VALUES(#{m_id}, #{s_storename}, #{s_crn})
    </insert>

    <insert id="joinCustomer" parameterType="MemberDto">
        INSERT INTO C(c_id, c_name) 
        VALUES(#{m_id}, #{c_name})
    </insert>

    <select id="countById" resultType="int">
    SELECT COUNT(*) FROM "CJCS"."MEMBER" WHERE "M_ID" = #{m_id}
    </select>


    <!-- id찾기 -->
    <select id="findIdByEmail" resultType="String">
       SELECT M_ID
        FROM CUSTOMER_INFO
       WHERE M_EMAIL = #{email} AND C_NAME = #{name}
    </select>


    <select id="verifyUser" resultType="Integer">
        SELECT COUNT(*)
        FROM CUSTOMER_INFO
        WHERE C_NAME = #{name}
        AND M_ID = #{userId}
        AND M_EMAIL = #{email}
    </select>

 <update id="resetPassword" parameterType="Map">
    UPDATE M
    SET M_PW = #{newPassword}
    WHERE M_ID = #{userId}
</update>


<!-- 회원탈퇴 -->
 
<resultMap id="MemberResult" type="com.cjcs.bnb.dto.MemberDto">
    <result property="m_id" column="M_ID"/>
    <result property="m_pw" column="M_PW"/>
    <result property="c_name" column="C_NAME"/>
    <result property="m_addr" column="M_ADDR"/>
    <result property="m_phone" column="M_PHONE"/>
    <result property="m_email" column="M_EMAIL"/>
    <result property="m_joindate" column="M_JOINDATE"/>
</resultMap>


<select id="getEncodedPassword" resultType="String">
    SELECT M_PW
    FROM "CJCS"."CUSTOMER_INFO"
    WHERE M_ID = #{m_id}
</select>


<select id="getMemberInfoById" resultMap="MemberResult">
    SELECT * 
    FROM "CJCS"."CUSTOMER_INFO"
    WHERE M_ID = #{m_id}
</select>


<!-- CUSTOMER 테이블에서 데이터 삭제 -->
<delete id="deleteCustomerById">
    DELETE FROM "CJCS"."CUSTOMER" WHERE C_ID = #{m_id}
</delete>

<!-- MEMBER 테이블에서 데이터 삭제 -->
<delete id="deleteMemberById">
    DELETE FROM "CJCS"."MEMBER" WHERE M_ID = #{m_id}gi
</delete>




<!-- <delete id="deleteMemberById">
    DELETE FROM "CJCS"."CUSTOMER_INFO" WHERE M_ID = #{m_id}
</delete>

<delete id="deleteCustomerById">
    DELETE FROM "CJCS"."CUSTOMER" WHERE C_ID = #{m_id}
</delete> -->

<!--예림-->

    <!--id로 판매자회원정보 가져오기-->
    <select id="getSellerInfoById" parameterType="String" resultType="MemberDto">
        <!--DB에 seller_info라는 뷰 미리 만들어놨음-->
        SELECT * FROM SELLER_INFO 
        WHERE M_ID=#{m_id}
    </select>

    <!--판매자회원정보 수정하기-->
    <update id="updateMemberInfo" parameterType="MemberDto">
        UPDATE M 
        <set>
            <if test="m_pw != null">m_pw = #{m_pw},</if>
            <if test="m_addr != null">m_addr = #{m_addr},</if>
            <if test="m_phone != null">m_phone = #{m_phone},</if>
            <if test="m_email != null">m_email = #{m_email},</if>
        </set>
        WHERE M_ID=#{m_id}
    </update>
    <update id="updateSellerInfo" parameterType="MemberDto">
        UPDATE S 
        <set>
            <if test="s_storename != null">s_storename = #{s_storename},</if>
            <if test="s_storedesc != null">s_storedesc = #{s_storedesc},</if>
            <if test="s_crn != null">s_crn = #{s_crn},</if>
            <if test="s_deliveryfee != null">s_deliveryfee = #{s_deliveryfee},</if>
            <if test="s_latefee != null">s_latefee = #{s_latefee}</if>
        </set>
        WHERE S_ID=#{m_id}
    </update>

    <!-- 오늘 즐겨찾기 회원수 카운트 -->
    <select id="getTodayBookmarkCnt" parameterType="SellerDto" resultType="Integer">
        SELECT COUNT(*)
        FROM FavStore
        WHERE FAVS_S_ID = 'seller001' and TRUNC(FAVS_DATE) = TRUNC(SYSDATE)
        <!-- WHERE FAVS_S_ID = #{s_id} and TRUNC(FAVS_DATE) = TRUNC(sysdate) --> 
    </select>

    <!-- 이번주 즐겨잧기 회원수 카운트 -->
    <select id="getWeekBookmarkCnt" parameterType="SellerDto" resultType="Integer">
        SELECT COUNT(*)
        FROM FavStore
        WHERE FAVS_S_ID = 'seller001' and FAVS_DATE >= to_char(sysdate-7, 'yy/mm/dd')
        <!-- WHERE FAVS_S_ID = #{s_id} and FAVS_DATE >= to_char(sysdate-7, 'yy/mm/dd') -->
    </select>

    <!-- 이번달 즐겨잧기 회원수 카운트 -->
    <select id="getMonthBookmarkCnt" parameterType="SellerDto" resultType="Integer">
        SELECT COUNT(*)
        FROM FavStore
        WHERE FAVS_S_ID = 'seller001' and FAVS_DATE >= to_char(sysdate-30, 'yy/mm/dd')
        <!-- WHERE FAVS_S_ID = #{s_id} and FAVS_DATE >= to_char(sysdate-30, 'yy/mm/dd') -->
    </select>

    <!-- 이용 회원 리스트 불러오기 -->
    <select id="getCsMemberList" resultType="MemberDto">
        SELECT 
            o_c_id,
            c_name,
            SUM(CASE WHEN order_sort = '구매' THEN amount ELSE 0 END) AS SELL_AMOUNT,
            SUM(CASE WHEN order_sort = '대여' THEN amount ELSE 0 END) AS RENTAL_AMOUNT,
            COUNT(CASE WHEN r_latefee_total > 0 THEN 1 ELSE NULL END) AS LATE_AMOUNT
        FROM 
            order_list
        INNER JOIN 
            customer ON order_list.o_c_id = customer.c_id
        where
            s_id = 'seller001'
        GROUP BY 
            o_c_id, c_name
    </select>

<!--수희-->

    <!--모든구매자회원정보 최신순으로 가져오기-->
    <select id="getAllCustomerInfo" resultType="MemberDto">
        SELECT * FROM CUSTOMER_INFO
        ORDER BY m_joindate DESC
    </select>

    <!--검색조건에 맞는 구매자회원정보 가져오기-->
    <select id="getCustomerListByKeyword" parameterType="SearchDto" resultType="MemberDto">
		SELECT * FROM
		<choose>
		    <when test="colname!=null and colname !=''">                
		    	(SELECT rownum rn, CI.*
		    	 FROM (SELECT * FROM CUSTOMER_INFO
		    	       WHERE ${colname} LIKE '%'||#{keyword}||'%'
		    	       ORDER BY m_joindate DESC) CI
		    	)
		    </when>
		    <otherwise>
		    	(SELECT rownum rn, CI.*
				 FROM CUSTOMER_INFO CI
            	 ORDER BY m_joindate DESC)
		    </otherwise>
		</choose>
		<![CDATA[
		WHERE rn>=#{pageNum}*#{listCnt}-9 and rn<=#{pageNum}*#{listCnt}
		]]>	
	</select>

    <!--검색조건에 맞는 구매자회원 수 세기-->
    <select id="countCustomers" resultType="Integer">
        SELECT COUNT(*) FROM C
        <if test="colname != null and colname != ''">
		      WHERE ${colname} LIKE '%'||#{keyword}||'%'
		</if>
    </select>

    <!--모든판매자회원정보 최신순으로 가져오기-->
    <select id="getAllSellerInfo" resultType="MemberDto">
        SELECT * FROM SELLER_INFO
        ORDER BY m_joindate DESC
    </select>

    <!--검색조건에 맞는 판매자회원정보 가져오기-->
    <select id="getSellerListByKeyword" parameterType="SearchDto" resultType="MemberDto">
		SELECT * FROM
		<choose>
		    <when test="colname!=null and colname !=''">                
		    	(SELECT rownum rn, SI.*
		    	 FROM (SELECT * FROM SELLER_INFO
		    	       WHERE ${colname} LIKE '%'||#{keyword}||'%'
		    	       ORDER BY m_joindate DESC) SI
		    	)
		    </when>
		    <otherwise>
		    	(SELECT rownum rn, SI.*
				 FROM SELLER_INFO SI
            	 ORDER BY m_joindate DESC)
		    </otherwise>
		</choose>
		<![CDATA[
		WHERE rn>=#{pageNum}*#{listCnt}-9 and rn<=#{pageNum}*#{listCnt}
		]]>	
	</select>

    <!--검색조건에 맞는 판매자회원 수 세기-->
    <select id="countSellers" resultType="Integer">
        SELECT COUNT(*) FROM S
        <if test="colname != null and colname != ''">
		      WHERE ${colname} LIKE '%'||#{keyword}||'%'
		</if>
    </select>

    <!--id로 구매자회원정보 가져오기-->
    <select id="getCustomerInfoById" parameterType="String" resultType="MemberDto">
        <!--DB에 customer_info라는 뷰 미리 만들어놨음-->
        SELECT * FROM CUSTOMER_INFO 
        WHERE M_ID=#{m_id}
    </select>

    <!--구매자회원정보 수정하기-->
    <!-- <update id="updateMemberInfo" parameterType="MemberDto">
        UPDATE M 
        <set>
            <if test="m_pw != null">m_pw = #{m_pw},</if>
            <if test="m_addr != null">m_addr = #{m_addr},</if>
            <if test="m_phone != null">m_phone = #{m_phone},</if>
            <if test="m_email != null">m_email = #{m_email},</if>
        </set>
        WHERE M_ID=#{m_id}
    </update> 예림이랑 중복-->
    <update id="updateCustomerInfo" parameterType="MemberDto">
        UPDATE C 
        <set>
            <if test="c_name != null">c_name = #{c_name}</if>
        </set>
        WHERE C_ID=#{m_id}
    </update>

    
    <!--즐겨찾는서점 총 개수 세기-->
    <select id="countFavStores" parameterType="String" resultType="Integer">
        SELECT COUNT(*) FROM FAVSTORE
        WHERE favs_c_id = #{c_id}
    </select>

    <!--즐겨찾는서점 리스트 가져오기-->
  	<select id="getFavStoreList" resultType="MemberDto">
        SELECT *
        FROM (SELECT rownum AS rnum, m_id, s_storename
              FROM (SELECT m_id, s_storename
                    FROM FAVSTORE, M, S
                    WHERE favs_s_id = s_id AND s_id = m_id AND favs_c_id = #{c_id}
                    ORDER BY favs_date DESC
                   )
             )
        WHERE rnum BETWEEN #{start} AND #{end}
    </select>

    <!--찜한도서 총 개수 세기-->
    <select id="countFavBooks" parameterType="String" resultType="Integer">
        SELECT COUNT(*) FROM FAVBOOK
        WHERE favb_c_id = #{c_id}
    </select>

    <!--찜한도서 리스트 가져오기-->
    <select id="getFavBookList" resultType="BookDto">
        SELECT *
        FROM (SELECT rownum AS rnum, b_s_id, b_isbn, b_title, b_author
              FROM (SELECT b_s_id, b_isbn, b_title, b_author
                    FROM FAVBOOK, B
                    WHERE favb_s_id = b_s_id AND favb_b_isbn = b_isbn AND favb_c_id = #{c_id}
                    ORDER BY favb_date DESC
                   )
             )
        WHERE rnum BETWEEN #{start} AND #{end}
    </select>

    <!--가장 최근에 등록한 즐찾서점의 서점아이디, 서점명 가져오기-->
    <select id="getLatestFavStoreByCId" resultType="Map">
        SELECT favs_s_id as "favs_s_id", s_storename as "favs_s_storename"
        FROM (SELECT rownum rn, favs_s_id, s_storename
                FROM (SELECT favs_s_id, s_storename FROM FAVSTORE, S
                      WHERE favs_c_id = #{c_id} AND favs_s_id = s_id
                      ORDER BY favs_date DESC)
              )
        WHERE rn = #{rownum}
    </select>

    <!--가장 최근에 등록한 찜도서의 판매서점아이디, 책isbn 가져오기-->
    <select id="getLatestFavBookByCId" resultType="Map">
        <!--결과를 Map에 넣을 땐 까먹지 말고 as "키이름" 해주기ㅅㅂ-->
        SELECT favb_s_id as "favb_s_id", favb_b_isbn as "favb_b_isbn"
        FROM (SELECT rownum rn, favb_s_id, favb_b_isbn
              FROM (SELECT favb_s_id, favb_b_isbn FROM FAVBOOK WHERE favb_c_id = #{c_id} ORDER BY favb_date DESC))
        WHERE rn = #{rownum}
    </select>
    
</mapper>